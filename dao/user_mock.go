// Automatically generated by MockGen. DO NOT EDIT!
// Source: user.go

package dao

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/shohhei1126/bbs-go/model"
)

// Mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *_MockUserRecorder
}

// Recorder for MockUser (not exported)
type _MockUserRecorder struct {
	mock *MockUser
}

func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &_MockUserRecorder{mock}
	return mock
}

func (_m *MockUser) EXPECT() *_MockUserRecorder {
	return _m.recorder
}

func (_m *MockUser) Create(user *model.User) error {
	ret := _m.ctrl.Call(_m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUserRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockUser) FindById(id uint32) (*model.User, error) {
	ret := _m.ctrl.Call(_m, "FindById", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserRecorder) FindById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindById", arg0)
}

func (_m *MockUser) FindByIds(ids []uint32) (model.UserSlice, error) {
	ret := _m.ctrl.Call(_m, "FindByIds", ids)
	ret0, _ := ret[0].(model.UserSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserRecorder) FindByIds(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindByIds", arg0)
}
